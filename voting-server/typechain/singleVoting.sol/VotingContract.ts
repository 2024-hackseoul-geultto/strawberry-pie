/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface VotingContractInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "endVoting()": FunctionFragment;
    "getWinnerName()": FunctionFragment;
    "getWinningProposal()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "registerVoter(address)": FunctionFragment;
    "vote(uint256)": FunctionFragment;
    "voters(address)": FunctionFragment;
    "votingEndTime()": FunctionFragment;
    "votingEnded()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "endVoting"
      | "getWinnerName"
      | "getWinningProposal"
      | "proposals"
      | "registerVoter"
      | "vote"
      | "voters"
      | "votingEndTime"
      | "votingEnded"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "endVoting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getWinnerName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "voters", values: [string]): string;
  encodeFunctionData(
    functionFragment: "votingEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingEnded",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWinnerName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEnded",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VotingContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    endVoting(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getWinnerName(
      overrides?: CallOverrides
    ): Promise<[string] & { winnerName: string }>;

    getWinningProposal(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { winningProposalIndex: BigNumber }>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

    registerVoter(
      voter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vote(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean] & {
        hasVoted: boolean;
        vote: BigNumber;
        isRegistered: boolean;
      }
    >;

    votingEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingEnded(overrides?: CallOverrides): Promise<[boolean]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  endVoting(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getWinnerName(overrides?: CallOverrides): Promise<string>;

  getWinningProposal(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

  registerVoter(
    voter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vote(
    proposalIndex: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  voters(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, boolean] & {
      hasVoted: boolean;
      vote: BigNumber;
      isRegistered: boolean;
    }
  >;

  votingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  votingEnded(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    endVoting(overrides?: CallOverrides): Promise<void>;

    getWinnerName(overrides?: CallOverrides): Promise<string>;

    getWinningProposal(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; voteCount: BigNumber }>;

    registerVoter(voter: string, overrides?: CallOverrides): Promise<void>;

    vote(proposalIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean] & {
        hasVoted: boolean;
        vote: BigNumber;
        isRegistered: boolean;
      }
    >;

    votingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    votingEnded(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    endVoting(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    getWinnerName(overrides?: CallOverrides): Promise<BigNumber>;

    getWinningProposal(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerVoter(
      voter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vote(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    voters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    votingEnded(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endVoting(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getWinnerName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWinningProposal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerVoter(
      voter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vote(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingEnded(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
