/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface QuadraticVotingContractInterface extends utils.Interface {
  functions: {
    "TOTAL_CREDITS()": FunctionFragment;
    "admin()": FunctionFragment;
    "registerVoter(address,uint256)": FunctionFragment;
    "voteCount()": FunctionFragment;
    "voters(address)": FunctionFragment;
    "votes(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TOTAL_CREDITS"
      | "admin"
      | "registerVoter"
      | "voteCount"
      | "voters"
      | "votes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "TOTAL_CREDITS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "voteCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "voters", values: [string]): string;
  encodeFunctionData(functionFragment: "votes", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "TOTAL_CREDITS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;

  events: {};
}

export interface QuadraticVotingContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuadraticVotingContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TOTAL_CREDITS(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    registerVoter(
      voter: string,
      credit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    voteCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { credit: BigNumber; isRegistered: boolean }
    >;

    votes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { votingEnded: boolean }>;
  };

  TOTAL_CREDITS(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  registerVoter(
    voter: string,
    credit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  voteCount(overrides?: CallOverrides): Promise<BigNumber>;

  voters(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { credit: BigNumber; isRegistered: boolean }
  >;

  votes(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    TOTAL_CREDITS(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    registerVoter(
      voter: string,
      credit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voteCount(overrides?: CallOverrides): Promise<BigNumber>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { credit: BigNumber; isRegistered: boolean }
    >;

    votes(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    TOTAL_CREDITS(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    registerVoter(
      voter: string,
      credit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    voteCount(overrides?: CallOverrides): Promise<BigNumber>;

    voters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TOTAL_CREDITS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerVoter(
      voter: string,
      credit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    voteCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
